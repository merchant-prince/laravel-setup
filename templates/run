#!/usr/bin/env python3

import os
from argparse import ArgumentParser, Namespace, REMAINDER
from pathlib import Path
from subprocess import run


def parser() -> ArgumentParser:
    main_parser: ArgumentParser = ArgumentParser(
        prog='run',
        description='A script to run commands on the current laravel project stack.',
        allow_abbrev=False
    )

    action_subparser = main_parser.add_subparsers(
        title='Action',
        description='The action to take.',
        dest='action',
        required=True
    )

    action_subparser.add_parser(
        'artisan',
        description="Run the project's artisan CLI.",
        add_help=True,
        allow_abbrev=False
    ).add_argument(
        'command',
        nargs=REMAINDER,
        help='The artisan command to be run.'
    )

    action_subparser.add_parser(
        'composer',
        description='Run a composer command on the current project.',
        add_help=True,
        allow_abbrev=False
    ).add_argument(
        'command',
        nargs=REMAINDER,
        help='The composer command to be run.'
    )

    action_subparser.add_parser(
        'yarn',
        description='Run a yarn command on the current project.',
        add_help=True,
        allow_abbrev=False
    ).add_argument(
        'command',
        nargs=REMAINDER,
        help='The yarn command to be run.'
    )

    return main_parser


if __name__ == "__main__":
    arguments: Namespace = parser().parse_args()

    if arguments.action == 'artisan':
        run(('docker-compose', 'exec', '--user', 'www-data', 'php', 'php', 'artisan', *arguments.command))

    elif arguments.action == 'composer':
        run(('docker-compose', 'exec', '--user', 'www-data', 'php', 'composer', *arguments.command))

    elif arguments.action == 'yarn':
        run((
            'docker', 'run',
            '--rm',
            '--interactive',
            '--tty',
            '--user', f'{os.geteuid()}:{os.getegid()}',
            '--workdir', '/application',
            '--mount',
            'type=bind,'
            f"source={Path(f'{Path(__file__).parent}/application/core/${PROJECT_NAME}')},"
            'destination=/application',
            'node:${NODE_IMAGE_TAG}', 'yarn', *arguments.command
        ))
